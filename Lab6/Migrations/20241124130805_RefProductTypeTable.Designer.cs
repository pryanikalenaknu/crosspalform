// <auto-generated />
using System;
using Lab6.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lab6.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241124130805_RefProductTypeTable")]
    partial class RefProductTypeTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("Lab6.Data.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressDetails")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            AddressDetails = "Kyiv Ukraine"
                        },
                        new
                        {
                            AddressId = 2,
                            AddressDetails = "Poltava Ukraine"
                        });
                });

            modelBuilder.Entity("Lab6.Data.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            ContactDetails = "123456789",
                            CustomerName = "Olena Kovtun"
                        },
                        new
                        {
                            CustomerId = 2,
                            ContactDetails = "987654321",
                            CustomerName = "Oksana Kovtun"
                        });
                });

            modelBuilder.Entity("Lab6.Data.Entities.CustomerAddress", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("Lab6.Data.Entities.CustomerOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderDetails")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderStatusCode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentMethodCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusCode");

                    b.HasIndex("PaymentMethodCode");

                    b.ToTable("CustomerOrders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CustomerId = 1,
                            OrderDate = new DateTime(2024, 11, 14, 13, 8, 4, 734, DateTimeKind.Utc).AddTicks(3500),
                            OrderDetails = "Details",
                            OrderStatusCode = 2,
                            PaymentMethodCode = 2
                        },
                        new
                        {
                            OrderId = 2,
                            CustomerId = 2,
                            OrderDate = new DateTime(2024, 11, 19, 13, 8, 4, 734, DateTimeKind.Utc).AddTicks(3510),
                            OrderDetails = "Details",
                            OrderStatusCode = 1,
                            PaymentMethodCode = 1
                        },
                        new
                        {
                            OrderId = 3,
                            CustomerId = 2,
                            OrderDate = new DateTime(2024, 11, 22, 13, 8, 4, 734, DateTimeKind.Utc).AddTicks(3510),
                            OrderDetails = "Details",
                            OrderStatusCode = 2,
                            PaymentMethodCode = 1
                        });
                });

            modelBuilder.Entity("Lab6.Data.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DepartmentDetails")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Lab6.Data.Entities.DepartmentStore", b =>
                {
                    b.Property<int>("DeptStoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeptStoreChainId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StoreDetails")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DeptStoreId");

                    b.HasIndex("AddressId");

                    b.HasIndex("DeptStoreChainId");

                    b.ToTable("DepartmentStores");
                });

            modelBuilder.Entity("Lab6.Data.Entities.DepartmentStoreChain", b =>
                {
                    b.Property<int>("DeptStoreChainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChainDetails")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChainName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DeptStoreChainId");

                    b.ToTable("DepartmentStoreChains");
                });

            modelBuilder.Entity("Lab6.Data.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderItemId = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            OrderItemId = 2,
                            OrderId = 2,
                            ProductId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            OrderItemId = 3,
                            OrderId = 3,
                            ProductId = 2,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Lab6.Data.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductTypeCode")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RefProductTypeProductTypeCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductTypeCode");

                    b.HasIndex("RefProductTypeProductTypeCode");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductName = "Laptop",
                            ProductTypeCode = 1
                        },
                        new
                        {
                            ProductId = 2,
                            ProductName = "T-Shirt",
                            ProductTypeCode = 2
                        },
                        new
                        {
                            ProductId = 3,
                            ProductName = "Hammer",
                            ProductTypeCode = 3
                        });
                });

            modelBuilder.Entity("Lab6.Data.Entities.ProductSupplier", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalSupplied")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductSuppliers");
                });

            modelBuilder.Entity("Lab6.Data.Entities.RefJobTitle", b =>
                {
                    b.Property<int>("JobTitleCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobTitleDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("JobTitleCode");

                    b.ToTable("RefJobTitles");

                    b.HasData(
                        new
                        {
                            JobTitleCode = 1,
                            JobTitleDescription = "Manager"
                        },
                        new
                        {
                            JobTitleCode = 2,
                            JobTitleDescription = "Sales Associate"
                        });
                });

            modelBuilder.Entity("Lab6.Data.Entities.RefOrderStatusCode", b =>
                {
                    b.Property<int>("OrderStatusCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrderStatusDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OrderStatusCode");

                    b.ToTable("RefOrderStatusCodes");

                    b.HasData(
                        new
                        {
                            OrderStatusCode = 1,
                            OrderStatusDescription = "Pending"
                        },
                        new
                        {
                            OrderStatusCode = 2,
                            OrderStatusDescription = "Completed"
                        });
                });

            modelBuilder.Entity("Lab6.Data.Entities.RefPaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentMethodDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PaymentMethodCode");

                    b.ToTable("RefPaymentMethods");

                    b.HasData(
                        new
                        {
                            PaymentMethodCode = 1,
                            PaymentMethodDescription = "Card"
                        },
                        new
                        {
                            PaymentMethodCode = 2,
                            PaymentMethodDescription = "Cash"
                        });
                });

            modelBuilder.Entity("Lab6.Data.Entities.RefProductType", b =>
                {
                    b.Property<int>("ProductTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductTypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProductTypeCode");

                    b.ToTable("RefProductTypes");

                    b.HasData(
                        new
                        {
                            ProductTypeCode = 1,
                            ProductTypeDescription = "Electronics"
                        },
                        new
                        {
                            ProductTypeCode = 2,
                            ProductTypeDescription = "Clothing"
                        },
                        new
                        {
                            ProductTypeCode = 3,
                            ProductTypeDescription = "Hardware"
                        });
                });

            modelBuilder.Entity("Lab6.Data.Entities.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeptStoreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTitleCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StaffId");

                    b.HasIndex("DeptStoreId");

                    b.HasIndex("JobTitleCode");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Lab6.Data.Entities.StaffDepartmentAssignment", b =>
                {
                    b.Property<int>("StaffId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateAssignedTo")
                        .HasColumnType("TEXT");

                    b.HasKey("StaffId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("StaffDepartmentAssignments");
                });

            modelBuilder.Entity("Lab6.Data.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SupplierDetails")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            SupplierDetails = "Details",
                            SupplierName = "A"
                        },
                        new
                        {
                            SupplierId = 2,
                            SupplierDetails = "Details",
                            SupplierName = "B"
                        });
                });

            modelBuilder.Entity("Lab6.Data.Entities.SupplierAddress", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("TEXT");

                    b.HasKey("SupplierId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("SupplierAddresses");
                });

            modelBuilder.Entity("Lab6.Data.Entities.CustomerAddress", b =>
                {
                    b.HasOne("Lab6.Data.Entities.Address", "Address")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Lab6.Data.Entities.CustomerOrder", b =>
                {
                    b.HasOne("Lab6.Data.Entities.Customer", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.RefOrderStatusCode", "OrderStatus")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("OrderStatusCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.RefPaymentMethod", "PaymentMethod")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("PaymentMethodCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Lab6.Data.Entities.DepartmentStore", b =>
                {
                    b.HasOne("Lab6.Data.Entities.Address", "Address")
                        .WithMany("DepartmentStores")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.DepartmentStoreChain", "DepartmentStoreChain")
                        .WithMany("DepartmentStores")
                        .HasForeignKey("DeptStoreChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("DepartmentStoreChain");
                });

            modelBuilder.Entity("Lab6.Data.Entities.OrderItem", b =>
                {
                    b.HasOne("Lab6.Data.Entities.CustomerOrder", "CustomerOrder")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Lab6.Data.Entities.Product", b =>
                {
                    b.HasOne("Lab6.Data.Entities.RefProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.RefProductType", null)
                        .WithMany("Products")
                        .HasForeignKey("RefProductTypeProductTypeCode");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Lab6.Data.Entities.ProductSupplier", b =>
                {
                    b.HasOne("Lab6.Data.Entities.Product", "Product")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.Supplier", "Supplier")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Lab6.Data.Entities.Staff", b =>
                {
                    b.HasOne("Lab6.Data.Entities.DepartmentStore", "DepartmentStore")
                        .WithMany("Staff")
                        .HasForeignKey("DeptStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.RefJobTitle", "JobTitle")
                        .WithMany("Staff")
                        .HasForeignKey("JobTitleCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentStore");

                    b.Navigation("JobTitle");
                });

            modelBuilder.Entity("Lab6.Data.Entities.StaffDepartmentAssignment", b =>
                {
                    b.HasOne("Lab6.Data.Entities.Department", "Department")
                        .WithMany("StaffDepartmentAssignments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.Staff", "Staff")
                        .WithMany("StaffDepartmentAssignments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Lab6.Data.Entities.SupplierAddress", b =>
                {
                    b.HasOne("Lab6.Data.Entities.Address", "Address")
                        .WithMany("SupplierAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.Supplier", "Supplier")
                        .WithMany("SupplierAddresses")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Lab6.Data.Entities.Address", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("DepartmentStores");

                    b.Navigation("SupplierAddresses");
                });

            modelBuilder.Entity("Lab6.Data.Entities.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("Lab6.Data.Entities.CustomerOrder", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Lab6.Data.Entities.Department", b =>
                {
                    b.Navigation("StaffDepartmentAssignments");
                });

            modelBuilder.Entity("Lab6.Data.Entities.DepartmentStore", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Lab6.Data.Entities.DepartmentStoreChain", b =>
                {
                    b.Navigation("DepartmentStores");
                });

            modelBuilder.Entity("Lab6.Data.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductSuppliers");
                });

            modelBuilder.Entity("Lab6.Data.Entities.RefJobTitle", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Lab6.Data.Entities.RefOrderStatusCode", b =>
                {
                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("Lab6.Data.Entities.RefPaymentMethod", b =>
                {
                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("Lab6.Data.Entities.RefProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Lab6.Data.Entities.Staff", b =>
                {
                    b.Navigation("StaffDepartmentAssignments");
                });

            modelBuilder.Entity("Lab6.Data.Entities.Supplier", b =>
                {
                    b.Navigation("ProductSuppliers");

                    b.Navigation("SupplierAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
